'use strict';

const config = require('./config.js'),
        c = config.get(),
        flatten = require('flat'),
        fs = require('fs'),
        path = require('path'),
        gulp = require('gulp'),
        jsBeautify = require('js-beautify'),
        mkdirp = require('mkdirp'),
        yaml = require('yamljs'),
        tokenConfig = c.tokens;

function interpolateYamlVariables(variables_object) {
    const regex = /!{\*(.*?)}/g;
    let json = JSON.stringify(variables_object);

    json = json.replace(regex, function(match, p1){
        var variable_keys = p1.split('-'),
            value = match,
            sub_variables_object = variables_object;

        variable_keys.forEach(function(key){
            if (sub_variables_object.hasOwnProperty(key)) {
                value = sub_variables_object[key];
                sub_variables_object = value;
            }
        });
        return value;
    });
    return JSON.parse(json);
}

function tokensSourceFileExists(sourceFile) {
    if (fs.existsSync(sourceFile)) {
        return true;
    } else {
        // eslint-disable-next-line no-console
        console.log(`Warning: ${sourceFile} cannot be found, token files not built`);
        return false;
    }
}

function writeTokensJsonFile(tokens) {
    const jsonOutputFilename = path.parse(c.tokensSourceFile).name + '.json',
            jsonOutputFilepath = path.join(c.rootPath, c.tokensPath, jsonOutputFilename);

    let jsonTokens = {
            tokens: tokens
        };

    // JSON tokens
    if (!fs.existsSync(tokenConfig.outputPath)) {
        mkdirp.sync(tokenConfig.outputPath);
    }

    fs.writeFileSync(jsonOutputFilepath, jsBeautify(JSON.stringify(jsonTokens)));
}

function writeTokensScssFile(tokens) {
    const scssOutputFilename = path.parse(c.tokensSourceFile).name + '.scss',
            scssOutputFilepath = path.join(c.rootPath, c.tokensPath, scssOutputFilename);
    let flattenedTokens = flatten(tokens, {delimiter: '-'}),
        scss = `// DO NOT EDIT: This file is automatically generated by a build task\n\n`,
        prevVarNameParent = false;

    // SCSS tokens
    for (var varName in flattenedTokens) {
        let value = flattenedTokens[varName],
            varNameParent = varName.substr(0, varName.indexOf('-'));
        if (prevVarNameParent && prevVarNameParent !== varNameParent) {
            scss += '\n';
        }
        prevVarNameParent = varNameParent;

        scss += `$${tokenConfig.namespace}-${varName}: ${value};\n`;
    }
    fs.writeFileSync(scssOutputFilepath, scss);
}

function convertTokensYaml(sourceFile, done) {
    if (tokensSourceFileExists(sourceFile)) {
        // First the tokens.yaml file is parsed into JSON
        let tokens = interpolateYamlVariables(yaml.load(tokenConfig.sourceFile));
        tokenConfig.formats.forEach(format => {
            switch (format) {
                case '.json':
                    tokens['class-prefix'] = c.classPrefix;
                    writeTokensJsonFile(tokens);
                    break;
                case '.scss':
                    tokens['class-prefix'] = '"' + c.classPrefix + '"';
                    writeTokensScssFile(tokens);
                    break;
            }
        });
        done();
    } else {
        done();
    }
}

gulp.task('tokens:build:all', function(done){
    convertTokensYaml(tokenConfig.sourceFile, done);
});

gulp.task('watch:tokens:all', function(){
    return gulp.watch([tokenConfig.sourceFile], gulp.series('tokens:build:all'));
});

module.exports = {
    convertTokensYaml: convertTokensYaml
};

