'use strict';

const config = require('./config.js'),
        buildConfig = config.get(),
        flatten = require('flat'),
        fs = require('fs'),
        gulp = require('gulp'),
        jsBeautify = require('js-beautify'),
        mkdirp = require('mkdirp'),
        yaml = require('yamljs'),
        tokenConfig = buildConfig.tokens;

function interpolateYamlVariables(variables_object) {
    const regex = /!{\*(.*?)}/g;
    let json = JSON.stringify(variables_object);

    json = json.replace(regex, function(match, p1){
        var variable_keys = p1.split('-'),
            value = match,
            sub_variables_object = variables_object;

        variable_keys.forEach(function(key){
            if (sub_variables_object.hasOwnProperty(key)) {
                value = sub_variables_object[key];
                sub_variables_object = value;
            }
        });
        return value;
    });
    return JSON.parse(json);
}

gulp.task('tokens:build:all', function(done){
    // First the tokens.yaml file is parsed into JSON
    let tokens = interpolateYamlVariables(yaml.load(tokenConfig.sourceFile)),
        flattenedTokens = flatten(tokens, {delimiter: '-'}),
        jsonTokens = {},
        scss = `// DO NOT EDIT: This file is automatically generated by a build task\n\n`,
        prevVarNameParent = false;

    // JSON tokens
    jsonTokens.tokens = tokens;
    if (!fs.existsSync(tokenConfig.outputPath)) {
        mkdirp.sync(tokenConfig.outputPath);
    }

    fs.writeFileSync(tokenConfig.jsonOutputFile, jsBeautify(JSON.stringify(jsonTokens)));

    // SCSS tokens
    for (var varName in flattenedTokens) {
        let value = flattenedTokens[varName],
            varNameParent = varName.substr(0, varName.indexOf('-'));
        if (prevVarNameParent && prevVarNameParent !== varNameParent) {
            scss += '\n';
        }
        prevVarNameParent = varNameParent;

        scss += `$${tokenConfig.namespace}-${varName}: ${value};\n`;
    }
    fs.writeFileSync(tokenConfig.scssOutputFile, scss);
    done();
});

gulp.task('watch:tokens:all', function(){
    return gulp.watch([tokenConfig.sourceFile], gulp.series('tokens:build:all'));
});
