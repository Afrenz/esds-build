'use strict';

const config = require('./config.js'),
        allTaskName = config.get().allTaskName,
        gulp = config.getGulpInstance(),
        buildConfig = config.get(),
        concat = require('gulp-concat-util'),
        eslint = require('gulp-eslint'),
        scriptConfig = buildConfig.scripts,
        buildTaskPrefix = scriptConfig.buildTaskPrefix,
        concatTaskPrefix = scriptConfig.concatTaskPrefix,
        lintTaskPrefix = scriptConfig.lintTaskPrefix,
        watchTaskPrefix = scriptConfig.watchTaskPrefix,
        scriptTasks = scriptConfig.tasks,
        concatenateTasks = scriptTasks.map(t => `${concatTaskPrefix}${t.name}`),
        lintTasks = scriptTasks.map(t => `${lintTaskPrefix}${t.name}`),
        watchTasks = scriptTasks.map(t => `${watchTaskPrefix}${t.name}`),
        buildTasks = scriptTasks.map(t => `${buildTaskPrefix}${t.name}`),
        lifecycleHookTaskNames = {
            concatAll: `${concatTaskPrefix}${allTaskName}`,
            lintAll: `${lintTaskPrefix}${allTaskName}`,
            buildAll: `${buildTaskPrefix}${allTaskName}`,
            watchAll: `${watchTaskPrefix}${allTaskName}`
        },
        lifecycleHookTaskNameKeys = Object.keys(lifecycleHookTaskNames);

function generateBasePreAndPostTasks(taskName) {
    const tasksWithPreAndPostHooks = config.getBaseTaskWithPreAndPostHooks(taskName);
    gulp.task(taskName, gulp.series(tasksWithPreAndPostHooks)); // Calls :base task and pre: and post: tasks if defined 
}

function getLintOptions(c) {
    let lintOptions = {};
    if (c.lintOptions) {
        lintOptions = c.lintOptions;
    }
    return lintOptions;
}

function generateConcatenateTask(c) {
    const taskName = `${concatTaskPrefix}${c.name}`;
    gulp.task(config.getBaseTaskName(taskName), function() {
        return gulp.src(c.sourcePaths)
            .pipe(concat(c.outputFilename))
            .pipe(concat.header('// DO NOT EDIT: This file is automatically generated by the project\'s build task\n'))
            .pipe(gulp.dest(c.outputPath));
    });

    generateBasePreAndPostTasks(taskName);
}

function generateLintTask(c) {
    let lintOptions = getLintOptions(c);
    const taskName = `${lintTaskPrefix}${c.name}`;

    gulp.task(config.getBaseTaskName(taskName), function () {
      return gulp.src(c.sourcePaths)
        .pipe(eslint(lintOptions))
        .pipe(eslint.formatEach('compact', process.stderr));
    });

    generateBasePreAndPostTasks(taskName);
}

function generateBuildTask(c) {
    const taskName = `${buildTaskPrefix}${c.name}`;

    gulp.task(config.getBaseTaskName(taskName), gulp.series(`${lintTaskPrefix}${c.name}`, `${concatTaskPrefix}${c.name}`));

    generateBasePreAndPostTasks(taskName);
}

function generateWatchTask(c) {
    const taskName = `${watchTaskPrefix}${c.name}`;

    gulp.task(config.getBaseTaskName(taskName), function(){
        return gulp.watch(c.sourcePaths, gulp.series(`${buildTaskPrefix}${c.name}`));
    });

    generateBasePreAndPostTasks(taskName);
}

// Dynamically generate concat, lint, and watch tasks
scriptTasks.forEach(function(c){
    generateLintTask(c);
    generateConcatenateTask(c);
    generateBuildTask(c);
    generateWatchTask(c);
});

// Concat all scripts
gulp.task(config.getBaseTaskName(lifecycleHookTaskNames.concatAll), gulp.parallel(concatenateTasks));

// Lint all scripts
gulp.task(config.getBaseTaskName(lifecycleHookTaskNames.lintAll), gulp.parallel(lintTasks));

// Build all scritps
gulp.task(config.getBaseTaskName(lifecycleHookTaskNames.buildAll), gulp.parallel(buildTasks));

// Watch all scritps
gulp.task(config.getBaseTaskName(lifecycleHookTaskNames.watchAll), gulp.parallel(watchTasks));

// Generate lifecycle hook (pre & post) tasks (if defined)
lifecycleHookTaskNameKeys.forEach((k) => {
    const t = lifecycleHookTaskNames[k],
            tasksWithPreAndPostHooks = config.getBaseTaskWithPreAndPostHooks(t);

    gulp.task(t, gulp.series(tasksWithPreAndPostHooks));
});

module.exports = {
    getLintOptions: getLintOptions
};
