'use strict';

const config = require('./config.js'),
        buildConfig = config.get(),
        gulp = require('gulp'),
        concat = require('gulp-concat-util'),
        eslint = require('gulp-eslint'),
        fs = require('fs'),
        scriptConfig = buildConfig.scripts,
        buildTaskPrefix = scriptConfig.buildTaskPrefix,
        concatTaskPrefix = scriptConfig.concatTaskPrefix,
        lintTaskPrefix = scriptConfig.lintTaskPrefix,
        watchTaskPrefix = scriptConfig.watchTaskPrefix,
        scriptTasks = scriptConfig.tasks,
        concatenateTasks = scriptTasks.map(t => `${concatTaskPrefix}${t.name}`),
        lintTasks = scriptTasks.map(t => `${lintTaskPrefix}${t.name}`),
        watchTasks = scriptTasks.map(t => `${watchTaskPrefix}${t.name}`),
        buildTasks = scriptTasks.map(t => `${buildTaskPrefix}${t.name}`);

function getLintOptions(c) {
    let lintOptions = {};
    if (c.lintOptions) {
        lintOptions = c.lintOptions;
    }
    if (lintOptions.configFile && !fs.existsSync(lintOptions.configFile)) {
        // eslint-disable-next-line no-console
        console.log(`Warning: ${lintOptions.configFile} cannot be found, using eslint defaults`);
        delete lintOptions.configFile;
    }
    return lintOptions;
}

function generateConcatenateTask(c) {
    gulp.task(`${concatTaskPrefix}${c.name}`, function() {
        return gulp.src(c.sourcePaths)
            .pipe(concat(c.outputFilename))
            .pipe(concat.header('// DO NOT EDIT: This file is automatically generated by the project\'s build task'))
            .pipe(gulp.dest(c.outputPath));
    });
}

function generateLintTask(c) {
    let lintOptions = getLintOptions(c);

    gulp.task(`${lintTaskPrefix}${c.name}`, function () {
      return gulp.src(c.sourcePaths)
        .pipe(eslint(lintOptions))
        .pipe(eslint.formatEach('compact', process.stderr));
    });
}

function generateBuildTask(c) {
    gulp.task(`${buildTaskPrefix}${c.name}`, gulp.series(`${lintTaskPrefix}${c.name}`, `${concatTaskPrefix}${c.name}`));
}

function generateWatchTask(c) {
    gulp.task(`${watchTaskPrefix}${c.name}`, function(){
        return gulp.watch(c.sourcePaths, gulp.series(`${buildTaskPrefix}${c.name}`));
    });
}

// Dynamically generate concat, lint, and watch tasks
scriptTasks.forEach(function(c){
    generateLintTask(c);
    generateConcatenateTask(c);
    generateBuildTask(c);
    generateWatchTask(c);
});

// Concat all scripts
gulp.task(`${concatTaskPrefix}all`, gulp.parallel(concatenateTasks));

// Lint all scripts
gulp.task(`${lintTaskPrefix}all`, gulp.parallel(lintTasks));

// Build all scritps
gulp.task(`${buildTaskPrefix}all`, gulp.parallel(buildTasks));

// Watch all scritps
gulp.task(`${watchTaskPrefix}all`, gulp.parallel(watchTasks));

module.exports = {
    getLintOptions: getLintOptions
};
